☀ Pseudocode for the Assembler ☀

🎴 Figure out how you read files
	☒ loadStrings() Maybe look this up online, or have an experimental project.

☒ Basic assembler translates symbol-less code
	create Parser, Code classes
	add hasMoreCommands(), advance() methods
	read and separate an instruction in Parser
		if there is an equal sign, register comp and dest. If there is
		a semicolon, register jump. Else, register comp
		retrieve the ASCII that is required
		code class:
			retrieve respective binary numbers from table of values
			put string together to form output string
			if there is an @, add a 0 to the beginning of the string and
			find 15-digit number after the @. convert it to binary

☐ Start symbol translations for symbol files
	create SymbolTable class (datastructure is dictionary)
	initialize builtin symbols (R0 → R1, screen-keybard, others)
	add symbolExists() method
	go through all the instructions in file
	if the syntax is (x), add to collection
		Use symbol table class with a dict
		Add symbol-value pairs to the dict
	otherwise, continue to scan instructions until end of file
	use regex to find if symbol is @x
		expression should look something like "@.[^0-9]"
		if expression is @x:
			if x doesn't already exist, add its respective value

🕯 Testing for the Assembler 🕯

Basic assembler test files:
	Add.asm (no AddL.asm because Add.asm has no symbols)
	MaxL.asm
	RectangleL.asm
	PongL.asm (can still use simulator test)

Symbol translation test files:
	Max.asm
	Rectangle.asm
	Cannot test Pong.asm (too long)

	Note that files from the Add folder do not have symbols.

Full assembler test files:
	Add.asm (could have something wrong testing add.asm)
	Max.asm
	MaxL.asm
	Rectangle.asm
	RectangleL.asm
	Pong.asm
	PongL.asm
	Pong files are long but can still be tested here.
