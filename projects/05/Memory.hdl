// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */
 
 /*

 Notes:
    to select Screen:
        somehow compare values...
        if comp. = true, access screen (flatten bus to 13)
    RAM: just plug in the value!
    Keyboard: no input, just return

    to compare values:
        use addition and maybe even a CPU! ← turns out to be wrong
        add 1 to the negative of 16384 (not written on my drawing pad: the negative is actually -16385). Then use ALU? ← wrong
        other: just compute ng manually

        Do the same for 24576 - 16384 (it's 8192)

        specifics:
            use an adder to add the address to -16384 and -24576. If the first condition is negative, I return RAM's output.
            If the second condition is negative, I have to calculate the SCREEN's index, and then I return it.
            If the third condition is negative, I think you can just say Keyboard(out=out).

            However, if you need to load, you also have to plug in the load values to RAM and Screen, but not Keyboard.
            If we had a Mux3Way16, that'd be great, since we need to use a multiplexor 

    Two important insights (with Kiwi's help):

        1. The first bit of the 15-digit string of addresses is the selector between RAM and Screen.

        2. The first bit of the 15-digit string of addresses can be removed and I can use the resulting word in the Screen chip address.

 */

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    // Put your code here:
}